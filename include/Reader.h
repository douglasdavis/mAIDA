/** @file Reader.h
 *  @brief mAIDA::Reader class header
 *  @class mAIDA::Reader
 *  @brief physics D3PD reader
 *
 *  This class yields the variables
 *  to be read from the physics D3PD
 *
 *  @author ROOT Autogenerated
 *  @author Douglas Davis < drd25@phy.duke.edu >
 */

//////////////////////////////////////////////////////////
// This class has been automatically generated on
// Tue Jul  1 19:51:23 2014 by ROOT version 5.34/18
// from TTree physics/physics
// found on file: ttbarW/user.finelli.013246.EXT0._00001.NTUP.root
//////////////////////////////////////////////////////////

#ifndef mAIDA_Reader_h
#define mAIDA_Reader_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TObject.h>

// Header file for the classes stored in the TTree if any.
#include <vector>

// Fixed size dimensions of array or collections stored in the TTree if any.

namespace mAIDA {
  
  class Reader {

  protected:

    TTree          *fChain;   //!pointer to the analyzed TTree or TChain
    TChain         *fRealChain;
    Int_t           fCurrent; //!current Tree number in a TChain

    // Declaration of leaf types
    Bool_t          EF_e24vh_medium1;
    Bool_t          EF_e24vhi_medium1;
    Bool_t          EF_e60_medium1;
    Bool_t          EF_mu24_tight;
    Bool_t          EF_mu24i_tight;
    Bool_t          EF_mu36_tight;
    std::vector<int>     *trig_EF_el_EF_e24vh_medium1;
    std::vector<int>     *trig_EF_el_EF_e24vhi_medium1;
    std::vector<int>     *trig_EF_el_EF_e60_medium1;
    std::vector<int>     *trig_EF_trigmuonef_EF_mu24_tight;
    std::vector<int>     *trig_EF_trigmuonef_EF_mu24i_tight;
    std::vector<int>     *trig_EF_trigmuonef_EF_mu36_tight;
    UInt_t          RunNumber;
    UInt_t          EventNumber;
    UInt_t          lbn;
    Float_t         averageIntPerXing;
    UInt_t          mc_channel_number;
    UInt_t          coreFlags;
    UInt_t          larError;
    UInt_t          tileError;
    Float_t         Eventshape_rhoKt4EM;
    Float_t         Eventshape_rhoKt4LC;
    std::vector<float>   *musp_eta;
    std::vector<float>   *musp_phi;
    std::vector<unsigned short> *musp_innerSegments;
    std::vector<unsigned short> *musp_middleSegments;
    std::vector<unsigned short> *musp_outerSegments;
    Int_t                 el_n;
    std::vector<float>   *el_E;
    std::vector<float>   *el_pt;
    std::vector<float>   *el_eta;
    std::vector<float>   *el_phi;
    std::vector<float>   *el_charge;
    std::vector<int>     *el_author;
    std::vector<unsigned int> *el_isEM;
    std::vector<unsigned int> *el_isEMLoose;
    std::vector<unsigned int> *el_isEMMedium;
    std::vector<unsigned int> *el_isEMTight;
    std::vector<unsigned int> *el_OQ;
    std::vector<int>     *el_type;
    std::vector<int>     *el_origin;
    std::vector<int>     *el_typebkg;
    std::vector<int>     *el_originbkg;
    std::vector<int>     *el_truth_type;
    std::vector<int>     *el_truth_matched;
    std::vector<int>     *el_medium;
    std::vector<int>     *el_tight;
    std::vector<int>     *el_loosePP;
    std::vector<int>     *el_mediumPP;
    std::vector<int>     *el_tightPP;
    std::vector<float>   *el_Ethad;
    std::vector<float>   *el_Ethad1;
    std::vector<float>   *el_f1;
    std::vector<float>   *el_Emax2;
    std::vector<float>   *el_wstot;
    std::vector<float>   *el_emaxs1;
    std::vector<float>   *el_weta2;
    std::vector<float>   *el_f3;
    std::vector<float>   *el_Etcone20;
    std::vector<float>   *el_Etcone30;
    std::vector<float>   *el_ptcone30;
    std::vector<float>   *el_deltaeta1;
    std::vector<float>   *el_deltaphi2;
    std::vector<float>   *el_deltaphiRescaled;
    std::vector<float>   *el_expectHitInBLayer;
    std::vector<float>   *el_trackd0_physics;
    std::vector<float>   *el_reta;
    std::vector<float>   *el_rphi;
    std::vector<float>   *el_etap;
    std::vector<std::vector<int> > *el_refittedTrack_author;
    std::vector<std::vector<float> > *el_refittedTrack_LMqoverp;
    std::vector<float>   *el_cl_E;
    std::vector<float>   *el_cl_pt;
    std::vector<float>   *el_cl_eta;
    std::vector<float>   *el_cl_phi;
    std::vector<float>   *el_etas2;
    std::vector<float>   *el_trackphi;
    std::vector<float>   *el_tracktheta;
    std::vector<float>   *el_trackqoverp;
    std::vector<float>   *el_tracketa;
    std::vector<int>     *el_nBLHits;
    std::vector<int>     *el_nPixHits;
    std::vector<int>     *el_nTRTHits;
    std::vector<int>     *el_nPixelDeadSensors;
    std::vector<int>     *el_nSCTDeadSensors;
    std::vector<int>     *el_nBLayerOutliers;
    std::vector<int>     *el_nPixelOutliers;
    std::vector<int>     *el_nSCTOutliers;
    std::vector<int>     *el_nTRTOutliers;
    std::vector<int>     *el_expectBLayerHit;
    std::vector<int>     *el_nSiHits;
    std::vector<float>   *el_TRTHighTHitsRatio;
    std::vector<float>   *el_TRTHighTOutliersRatio;
    std::vector<float>   *el_trackd0pvunbiased;
    std::vector<float>   *el_trackz0pvunbiased;
    std::vector<float>   *el_tracksigd0pvunbiased;
    std::vector<float>   *el_Unrefittedtrack_phi;
    std::vector<float>   *el_Unrefittedtrack_pt;
    std::vector<float>   *el_Unrefittedtrack_eta;
    std::vector<float>   *el_MI10_max40_ptsum;
    std::vector<int>     *el_trk_index;
    std::vector<int>     *el_GSF_trk_index;
    Int_t                 mu_n;
    std::vector<float>   *mu_E;
    std::vector<float>   *mu_pt;
    std::vector<float>   *mu_eta;
    std::vector<float>   *mu_phi;
    std::vector<float>   *mu_px;
    std::vector<float>   *mu_py;
    std::vector<float>   *mu_pz;
    std::vector<float>   *mu_charge;
    std::vector<int>     *mu_author;
    std::vector<float>   *mu_etcone20;
    std::vector<float>   *mu_etcone30;
    std::vector<float>   *mu_ptcone30;
    std::vector<float>   *mu_momentumBalanceSignificance;
    std::vector<float>   *mu_energyLossPar;
    std::vector<float>   *mu_energyLossType;
    std::vector<int>     *mu_isStandAloneMuon;
    std::vector<int>     *mu_isCombinedMuon;
    std::vector<int>     *mu_isSegmentTaggedMuon;
    std::vector<int>     *mu_tight;
    std::vector<float>   *mu_id_z0_exPV;
    std::vector<float>   *mu_ms_phi;
    std::vector<float>   *mu_ms_theta;
    std::vector<float>   *mu_ms_qoverp;
    std::vector<float>   *mu_id_phi;
    std::vector<float>   *mu_id_theta;
    std::vector<float>   *mu_id_qoverp;
    std::vector<float>   *mu_me_theta;
    std::vector<float>   *mu_me_qoverp;
    std::vector<int>     *mu_nBLHits;
    std::vector<int>     *mu_nPixHits;
    std::vector<int>     *mu_nSCTHits;
    std::vector<int>     *mu_nTRTHits;
    std::vector<int>     *mu_nPixHoles;
    std::vector<int>     *mu_nSCTHoles;
    std::vector<int>     *mu_nTRTOutliers;
    std::vector<int>     *mu_nPixelDeadSensors;
    std::vector<int>     *mu_nSCTDeadSensors;
    std::vector<int>     *mu_expectBLayerHit;
    std::vector<int>     *mu_nprecisionLayers;
    std::vector<float>   *mu_trackphi;
    std::vector<float>   *mu_tracktheta;
    std::vector<float>   *mu_trackqoverp;
    std::vector<float>   *mu_trackd0beam;
    std::vector<int>     *mu_truth_type;
    std::vector<int>     *mu_truth_barcode;
    std::vector<int>     *mu_truth_matched;
    std::vector<float>   *mu_MI10_max40_ptsum;
    Int_t                 mu_muid_n;
    std::vector<float>   *mu_muid_E;
    std::vector<float>   *mu_muid_pt;
    std::vector<float>   *mu_muid_eta;
    std::vector<float>   *mu_muid_phi;
    std::vector<float>   *mu_muid_px;
    std::vector<float>   *mu_muid_py;
    std::vector<float>   *mu_muid_pz;
    std::vector<float>   *mu_muid_charge;
    std::vector<int>     *mu_muid_author;
    std::vector<float>   *mu_muid_etcone20;
    std::vector<float>   *mu_muid_etcone30;
    std::vector<float>   *mu_muid_ptcone30;
    std::vector<float>   *mu_muid_energyLossPar;
    std::vector<float>   *mu_muid_energyLossType;
    std::vector<int>     *mu_muid_isStandAloneMuon;
    std::vector<int>     *mu_muid_isCombinedMuon;
    std::vector<int>     *mu_muid_isSegmentTaggedMuon;
    std::vector<int>     *mu_muid_tight;
    std::vector<float>   *mu_muid_id_z0_exPV;
    std::vector<float>   *mu_muid_id_theta_exPV;
    std::vector<float>   *mu_muid_id_qoverp_exPV;
    std::vector<float>   *mu_muid_ms_phi;
    std::vector<float>   *mu_muid_ms_theta;
    std::vector<float>   *mu_muid_ms_qoverp;
    std::vector<float>   *mu_muid_id_phi;
    std::vector<float>   *mu_muid_id_theta;
    std::vector<float>   *mu_muid_id_qoverp;
    std::vector<float>   *mu_muid_me_theta;
    std::vector<float>   *mu_muid_me_qoverp;
    std::vector<int>     *mu_muid_nBLHits;
    std::vector<int>     *mu_muid_nPixHits;
    std::vector<int>     *mu_muid_nSCTHits;
    std::vector<int>     *mu_muid_nTRTHits;
    std::vector<int>     *mu_muid_nPixHoles;
    std::vector<int>     *mu_muid_nSCTHoles;
    std::vector<int>     *mu_muid_nTRTOutliers;
    std::vector<int>     *mu_muid_nPixelDeadSensors;
    std::vector<int>     *mu_muid_nSCTDeadSensors;
    std::vector<int>     *mu_muid_expectBLayerHit;
    std::vector<float>   *mu_muid_trackphi;
    std::vector<float>   *mu_muid_tracktheta;
    std::vector<float>   *mu_muid_trackqoverp;
    std::vector<float>   *mu_muid_trackd0beam;
    std::vector<float>   *mu_muid_trackd0pvunbiased;
    std::vector<float>   *mu_muid_tracksigd0pvunbiased;
    std::vector<int>     *mu_muid_truth_type;
    std::vector<int>     *mu_muid_truth_barcode;
    std::vector<int>     *mu_muid_truth_matched;
    std::vector<float>   *mu_muid_MI10_max40_ptsum;
    Float_t         MET_RefEle_tightpp_etx;
    Float_t         MET_RefEle_tightpp_ety;
    Float_t         MET_RefEle_tightpp_sumet;
    Float_t         MET_RefEle_mediumpp_etx;
    Float_t         MET_RefEle_mediumpp_ety;
    Float_t         MET_RefEle_mediumpp_sumet;
    Float_t         MET_RefJet_tightpp_etx;
    Float_t         MET_RefJet_tightpp_ety;
    Float_t         MET_RefJet_tightpp_sumet;
    Float_t         MET_RefJet_mediumpp_etx;
    Float_t         MET_RefJet_mediumpp_ety;
    Float_t         MET_RefJet_mediumpp_sumet;
    Float_t         MET_CellOut_tightpp_etx;
    Float_t         MET_CellOut_tightpp_ety;
    Float_t         MET_CellOut_tightpp_sumet;
    Float_t         MET_CellOut_mediumpp_etx;
    Float_t         MET_CellOut_mediumpp_ety;
    Float_t         MET_CellOut_mediumpp_sumet;
    Float_t         MET_Muon_Total_Muid_tightpp_etx;
    Float_t         MET_Muon_Total_Muid_tightpp_ety;
    Float_t         MET_Muon_Total_Muid_tightpp_sumet;
    Float_t         MET_Muon_Total_Muid_mediumpp_etx;
    Float_t         MET_Muon_Total_Muid_mediumpp_ety;
    Float_t         MET_Muon_Total_Muid_mediumpp_sumet;
    Float_t         MET_RefGamma_tightpp_etx;
    Float_t         MET_RefGamma_tightpp_ety;
    Float_t         MET_RefGamma_tightpp_sumet;
    Float_t         MET_RefGamma_mediumpp_etx;
    Float_t         MET_RefGamma_mediumpp_ety;
    Float_t         MET_RefGamma_mediumpp_sumet;
    Float_t         MET_RefFinal_tightpp_etx;
    Float_t         MET_RefFinal_tightpp_ety;
    Float_t         MET_RefFinal_tightpp_sumet;
    Float_t         MET_RefFinal_mediumpp_etx;
    Float_t         MET_RefFinal_mediumpp_ety;
    Float_t         MET_RefFinal_mediumpp_sumet;
    std::vector<std::vector<float> > *el_MET_tightpp_wpx;
    std::vector<std::vector<float> > *el_MET_tightpp_wpy;
    std::vector<std::vector<float> > *el_MET_tightpp_wet;
    std::vector<std::vector<unsigned int> > *el_MET_tightpp_statusWord;
    std::vector<std::vector<float> > *mu_muid_MET_tightpp_wpx;
    std::vector<std::vector<float> > *mu_muid_MET_tightpp_wpy;
    std::vector<std::vector<float> > *mu_muid_MET_tightpp_wet;
    std::vector<std::vector<unsigned int> > *mu_muid_MET_tightpp_statusWord;
    std::vector<std::vector<float> > *jet_AntiKt4LCTopo_MET_tightpp_wpx;
    std::vector<std::vector<float> > *jet_AntiKt4LCTopo_MET_tightpp_wpy;
    std::vector<std::vector<float> > *jet_AntiKt4LCTopo_MET_tightpp_wet;
    std::vector<std::vector<unsigned int> > *jet_AntiKt4LCTopo_MET_tightpp_statusWord;
    std::vector<std::vector<float> > *el_MET_mediumpp_wpx;
    std::vector<std::vector<float> > *el_MET_mediumpp_wpy;
    std::vector<std::vector<float> > *el_MET_mediumpp_wet;
    std::vector<std::vector<unsigned int> > *el_MET_mediumpp_statusWord;
    std::vector<std::vector<float> > *mu_muid_MET_mediumpp_wpx;
    std::vector<std::vector<float> > *mu_muid_MET_mediumpp_wpy;
    std::vector<std::vector<float> > *mu_muid_MET_mediumpp_wet;
    std::vector<std::vector<unsigned int> > *mu_muid_MET_mediumpp_statusWord;
    std::vector<std::vector<float> > *jet_AntiKt4LCTopo_MET_mediumpp_wpx;
    std::vector<std::vector<float> > *jet_AntiKt4LCTopo_MET_mediumpp_wpy;
    std::vector<std::vector<float> > *jet_AntiKt4LCTopo_MET_mediumpp_wet;
    std::vector<std::vector<unsigned int> > *jet_AntiKt4LCTopo_MET_mediumpp_statusWord;
    Float_t               MET_Truth_NonInt_etx;
    Float_t               MET_Truth_NonInt_ety;
    Float_t               MET_Truth_NonInt_sumet;
    Int_t                 jet_AntiKt4LCTopo_n;
    std::vector<float>   *jet_AntiKt4LCTopo_E;
    std::vector<float>   *jet_AntiKt4LCTopo_pt;
    std::vector<float>   *jet_AntiKt4LCTopo_eta;
    std::vector<float>   *jet_AntiKt4LCTopo_phi;
    std::vector<float>   *jet_AntiKt4LCTopo_EtaOrigin;
    std::vector<float>   *jet_AntiKt4LCTopo_PhiOrigin;
    std::vector<float>   *jet_AntiKt4LCTopo_MOrigin;
    std::vector<float>   *jet_AntiKt4LCTopo_BCH_CORR_CELL;
    std::vector<float>   *jet_AntiKt4LCTopo_BCH_CORR_JET;
    std::vector<int>     *jet_AntiKt4LCTopo_SamplingMax;
    std::vector<float>   *jet_AntiKt4LCTopo_fracSamplingMax;
    std::vector<int>     *jet_AntiKt4LCTopo_isUgly;
    std::vector<int>     *jet_AntiKt4LCTopo_isBadLooseMinus;
    std::vector<float>   *jet_AntiKt4LCTopo_emfrac;
    std::vector<float>   *jet_AntiKt4LCTopo_emscale_E;
    std::vector<float>   *jet_AntiKt4LCTopo_emscale_pt;
    std::vector<float>   *jet_AntiKt4LCTopo_emscale_m;
    std::vector<float>   *jet_AntiKt4LCTopo_emscale_eta;
    std::vector<float>   *jet_AntiKt4LCTopo_emscale_phi;
    std::vector<float>   *jet_AntiKt4LCTopo_ActiveAreaPx;
    std::vector<float>   *jet_AntiKt4LCTopo_ActiveAreaPy;
    std::vector<float>   *jet_AntiKt4LCTopo_ActiveAreaPz;
    std::vector<float>   *jet_AntiKt4LCTopo_ActiveAreaE;
    std::vector<float>   *jet_AntiKt4LCTopo_jvtxf;
    std::vector<float>   *jet_AntiKt4LCTopo_constscale_E;
    std::vector<float>   *jet_AntiKt4LCTopo_constscale_pt;
    std::vector<float>   *jet_AntiKt4LCTopo_constscale_m;
    std::vector<float>   *jet_AntiKt4LCTopo_constscale_eta;
    std::vector<float>   *jet_AntiKt4LCTopo_constscale_phi;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_weight_IP3D;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_weight_JetFitterCOMBNN;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_weight_MV1;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_weight_SV0;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_weight_SV1;
    std::vector<int>     *jet_AntiKt4LCTopo_flavor_truth_label;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_component_jfitcomb_pu;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_component_jfitcomb_pb;
    std::vector<float>   *jet_AntiKt4LCTopo_flavor_component_jfitcomb_pc;
    std::vector<float>   *jet_AntiKt4LCTopo_nTrk_pv0_1GeV;
    std::vector<float>   *jet_AntiKt4LCTopo_trackWIDTH_pv0_1GeV;
    std::vector<std::vector<int> > *jet_AntiKt4LCTopo_TrackAssoc_index;
    Int_t                 AntiKt4Truth_n;
    std::vector<float>   *AntiKt4Truth_E;
    std::vector<float>   *AntiKt4Truth_pt;
    std::vector<float>   *AntiKt4Truth_eta;
    std::vector<float>   *AntiKt4Truth_phi;
    Int_t                 top_hfor_type;
    std::vector<float>   *cl_lc_pt;
    std::vector<float>   *cl_lc_eta;
    std::vector<float>   *cl_lc_phi;
    Int_t                 trk_n;
    std::vector<float>   *trk_pt;
    std::vector<float>   *trk_eta;
    std::vector<float>   *trk_d0_wrtPV;
    std::vector<float>   *trk_z0_wrtPV;
    std::vector<float>   *trk_phi_wrtPV;
    std::vector<float>   *trk_theta_wrtPV;
    std::vector<float>   *trk_qoverp_wrtPV;
    std::vector<int>     *trk_nPixHits;
    std::vector<int>     *trk_nSCTHits;
    std::vector<float>   *trkpt4_pt;
    std::vector<float>   *trkpt4_eta;
    std::vector<float>   *trkpt4_phi_wrtPV;
    std::vector<float>   *trkpt4_err_qoverp_wrtPV;
    Int_t                 vxp_n;
    std::vector<float>   *vxp_z;
    std::vector<int>     *vxp_type;
    std::vector<int>     *vxp_nTracks;
    Int_t                 mc_n;
    std::vector<float>   *mc_pt;
    std::vector<float>   *mc_m;
    std::vector<float>   *mc_eta;
    std::vector<float>   *mc_phi;
    std::vector<int>     *mc_status;
    std::vector<int>     *mc_barcode;
    std::vector<int>     *mc_pdgId;
    std::vector<float>   *mc_charge;
    std::vector<std::vector<int> > *mc_child_index;
    std::vector<std::vector<int> > *mc_parent_index;
    Int_t                 mcVx_n;
    std::vector<float>   *mcVx_z;
    std::vector<int>     *muonTruth_barcode;
    std::vector<int>     *muonTruth_type;
    std::vector<int>     *muonTruth_origin;
    std::vector<std::vector<double> > *mcevt_weight;
    Int_t                 trig_EF_el_n;
    std::vector<float>   *trig_EF_el_eta;
    std::vector<float>   *trig_EF_el_phi;
    Int_t                 trig_EF_trigmuonef_n;
    std::vector<int>     *trig_EF_trigmuonef_track_n;
    std::vector<std::vector<float> > *trig_EF_trigmuonef_track_CB_pt;
    std::vector<std::vector<float> > *trig_EF_trigmuonef_track_CB_eta;
    std::vector<std::vector<float> > *trig_EF_trigmuonef_track_CB_phi;
    std::vector<int>     *GSF_trk_trk_index;

    // List of branches
    TBranch        *b_EF_e24vh_medium1;   //!
    TBranch        *b_EF_e24vhi_medium1;   //!
    TBranch        *b_EF_e60_medium1;   //!
    TBranch        *b_EF_mu24_tight;   //!
    TBranch        *b_EF_mu24i_tight;   //!
    TBranch        *b_EF_mu36_tight;   //!
    TBranch        *b_trig_EF_el_EF_e24vh_medium1;   //!
    TBranch        *b_trig_EF_el_EF_e24vhi_medium1;   //!
    TBranch        *b_trig_EF_el_EF_e60_medium1;   //!
    TBranch        *b_trig_EF_trigmuonef_EF_mu24_tight;   //!
    TBranch        *b_trig_EF_trigmuonef_EF_mu24i_tight;   //!
    TBranch        *b_trig_EF_trigmuonef_EF_mu36_tight;   //!
    TBranch        *b_RunNumber;   //!
    TBranch        *b_EventNumber;   //!
    TBranch        *b_lbn;   //!
    TBranch        *b_averageIntPerXing;   //!
    TBranch        *b_mc_channel_number;   //!
    TBranch        *b_coreFlags;   //!
    TBranch        *b_larError;   //!
    TBranch        *b_tileError;   //!
    TBranch        *b_Eventshape_rhoKt4EM;   //!
    TBranch        *b_Eventshape_rhoKt4LC;   //!
    TBranch        *b_musp_eta;   //!
    TBranch        *b_musp_phi;   //!
    TBranch        *b_musp_innerSegments;   //!
    TBranch        *b_musp_middleSegments;   //!
    TBranch        *b_musp_outerSegments;   //!
    TBranch        *b_el_n;   //!
    TBranch        *b_el_E;   //!
    TBranch        *b_el_pt;   //!
    TBranch        *b_el_eta;   //!
    TBranch        *b_el_phi;   //!
    TBranch        *b_el_charge;   //!
    TBranch        *b_el_author;   //!
    TBranch        *b_el_isEM;   //!
    TBranch        *b_el_isEMLoose;   //!
    TBranch        *b_el_isEMMedium;   //!
    TBranch        *b_el_isEMTight;   //!
    TBranch        *b_el_OQ;   //!
    TBranch        *b_el_type;   //!
    TBranch        *b_el_origin;   //!
    TBranch        *b_el_typebkg;   //!
    TBranch        *b_el_originbkg;   //!
    TBranch        *b_el_truth_type;   //!
    TBranch        *b_el_truth_matched;   //!
    TBranch        *b_el_medium;   //!
    TBranch        *b_el_tight;   //!
    TBranch        *b_el_loosePP;   //!
    TBranch        *b_el_mediumPP;   //!
    TBranch        *b_el_tightPP;   //!
    TBranch        *b_el_Ethad;   //!
    TBranch        *b_el_Ethad1;   //!
    TBranch        *b_el_f1;   //!
    TBranch        *b_el_Emax2;   //!
    TBranch        *b_el_wstot;   //!
    TBranch        *b_el_emaxs1;   //!
    TBranch        *b_el_weta2;   //!
    TBranch        *b_el_f3;   //!
    TBranch        *b_el_Etcone20;   //!
    TBranch        *b_el_Etcone30;   //!
    TBranch        *b_el_ptcone30;   //!
    TBranch        *b_el_deltaeta1;   //!
    TBranch        *b_el_deltaphi2;   //!
    TBranch        *b_el_deltaphiRescaled;   //!
    TBranch        *b_el_expectHitInBLayer;   //!
    TBranch        *b_el_trackd0_physics;   //!
    TBranch        *b_el_reta;   //!
    TBranch        *b_el_rphi;   //!
    TBranch        *b_el_etap;   //!
    TBranch        *b_el_refittedTrack_author;   //!
    TBranch        *b_el_refittedTrack_LMqoverp;   //!
    TBranch        *b_el_cl_E;   //!
    TBranch        *b_el_cl_pt;   //!
    TBranch        *b_el_cl_eta;   //!
    TBranch        *b_el_cl_phi;   //!
    TBranch        *b_el_etas2;   //!
    TBranch        *b_el_trackphi;   //!
    TBranch        *b_el_tracktheta;   //!
    TBranch        *b_el_trackqoverp;   //!
    TBranch        *b_el_tracketa;   //!
    TBranch        *b_el_nBLHits;   //!
    TBranch        *b_el_nPixHits;   //!
    TBranch        *b_el_nTRTHits;   //!
    TBranch        *b_el_nPixelDeadSensors;   //!
    TBranch        *b_el_nSCTDeadSensors;   //!
    TBranch        *b_el_nBLayerOutliers;   //!
    TBranch        *b_el_nPixelOutliers;   //!
    TBranch        *b_el_nSCTOutliers;   //!
    TBranch        *b_el_nTRTOutliers;   //!
    TBranch        *b_el_expectBLayerHit;   //!
    TBranch        *b_el_nSiHits;   //!
    TBranch        *b_el_TRTHighTHitsRatio;   //!
    TBranch        *b_el_TRTHighTOutliersRatio;   //!
    TBranch        *b_el_trackd0pvunbiased;   //!
    TBranch        *b_el_trackz0pvunbiased;   //!
    TBranch        *b_el_tracksigd0pvunbiased;   //!
    TBranch        *b_el_Unrefittedtrack_phi;   //!
    TBranch        *b_el_Unrefittedtrack_pt;   //!
    TBranch        *b_el_Unrefittedtrack_eta;   //!
    TBranch        *b_el_MI10_max40_ptsum;   //!
    TBranch        *b_el_trk_index;   //!
    TBranch        *b_el_GSF_trk_index;   //!
    TBranch        *b_mu_n;   //!
    TBranch        *b_mu_E;   //!
    TBranch        *b_mu_pt;   //!
    TBranch        *b_mu_eta;   //!
    TBranch        *b_mu_phi;   //!
    TBranch        *b_mu_px;   //!
    TBranch        *b_mu_py;   //!
    TBranch        *b_mu_pz;   //!
    TBranch        *b_mu_charge;   //!
    TBranch        *b_mu_author;   //!
    TBranch        *b_mu_etcone20;   //!
    TBranch        *b_mu_etcone30;   //!
    TBranch        *b_mu_ptcone30;   //!
    TBranch        *b_mu_momentumBalanceSignificance;   //!
    TBranch        *b_mu_energyLossPar;   //!
    TBranch        *b_mu_energyLossType;   //!
    TBranch        *b_mu_isStandAloneMuon;   //!
    TBranch        *b_mu_isCombinedMuon;   //!
    TBranch        *b_mu_isSegmentTaggedMuon;   //!
    TBranch        *b_mu_tight;   //!
    TBranch        *b_mu_id_z0_exPV;   //!
    TBranch        *b_mu_ms_phi;   //!
    TBranch        *b_mu_ms_theta;   //!
    TBranch        *b_mu_ms_qoverp;   //!
    TBranch        *b_mu_id_phi;   //!
    TBranch        *b_mu_id_theta;   //!
    TBranch        *b_mu_id_qoverp;   //!
    TBranch        *b_mu_me_theta;   //!
    TBranch        *b_mu_me_qoverp;   //!
    TBranch        *b_mu_nBLHits;   //!
    TBranch        *b_mu_nPixHits;   //!
    TBranch        *b_mu_nSCTHits;   //!
    TBranch        *b_mu_nTRTHits;   //!
    TBranch        *b_mu_nPixHoles;   //!
    TBranch        *b_mu_nSCTHoles;   //!
    TBranch        *b_mu_nTRTOutliers;   //!
    TBranch        *b_mu_nPixelDeadSensors;   //!
    TBranch        *b_mu_nSCTDeadSensors;   //!
    TBranch        *b_mu_expectBLayerHit;   //!
    TBranch        *b_mu_nprecisionLayers;   //!
    TBranch        *b_mu_trackphi;   //!
    TBranch        *b_mu_tracktheta;   //!
    TBranch        *b_mu_trackqoverp;   //!
    TBranch        *b_mu_trackd0beam;   //!
    TBranch        *b_mu_truth_type;   //!
    TBranch        *b_mu_truth_barcode;   //!
    TBranch        *b_mu_truth_matched;   //!
    TBranch        *b_mu_MI10_max40_ptsum;   //!
    TBranch        *b_mu_muid_n;   //!
    TBranch        *b_mu_muid_E;   //!
    TBranch        *b_mu_muid_pt;   //!
    TBranch        *b_mu_muid_eta;   //!
    TBranch        *b_mu_muid_phi;   //!
    TBranch        *b_mu_muid_px;   //!
    TBranch        *b_mu_muid_py;   //!
    TBranch        *b_mu_muid_pz;   //!
    TBranch        *b_mu_muid_charge;   //!
    TBranch        *b_mu_muid_author;   //!
    TBranch        *b_mu_muid_etcone20;   //!
    TBranch        *b_mu_muid_etcone30;   //!
    TBranch        *b_mu_muid_ptcone30;   //!
    TBranch        *b_mu_muid_energyLossPar;   //!
    TBranch        *b_mu_muid_energyLossType;   //!
    TBranch        *b_mu_muid_isStandAloneMuon;   //!
    TBranch        *b_mu_muid_isCombinedMuon;   //!
    TBranch        *b_mu_muid_isSegmentTaggedMuon;   //!
    TBranch        *b_mu_muid_tight;   //!
    TBranch        *b_mu_muid_id_z0_exPV;   //!
    TBranch        *b_mu_muid_id_theta_exPV;   //!
    TBranch        *b_mu_muid_id_qoverp_exPV;   //!
    TBranch        *b_mu_muid_ms_phi;   //!
    TBranch        *b_mu_muid_ms_theta;   //!
    TBranch        *b_mu_muid_ms_qoverp;   //!
    TBranch        *b_mu_muid_id_phi;   //!
    TBranch        *b_mu_muid_id_theta;   //!
    TBranch        *b_mu_muid_id_qoverp;   //!
    TBranch        *b_mu_muid_me_theta;   //!
    TBranch        *b_mu_muid_me_qoverp;   //!
    TBranch        *b_mu_muid_nBLHits;   //!
    TBranch        *b_mu_muid_nPixHits;   //!
    TBranch        *b_mu_muid_nSCTHits;   //!
    TBranch        *b_mu_muid_nTRTHits;   //!
    TBranch        *b_mu_muid_nPixHoles;   //!
    TBranch        *b_mu_muid_nSCTHoles;   //!
    TBranch        *b_mu_muid_nTRTOutliers;   //!
    TBranch        *b_mu_muid_nPixelDeadSensors;   //!
    TBranch        *b_mu_muid_nSCTDeadSensors;   //!
    TBranch        *b_mu_muid_expectBLayerHit;   //!
    TBranch        *b_mu_muid_trackphi;   //!
    TBranch        *b_mu_muid_tracktheta;   //!
    TBranch        *b_mu_muid_trackqoverp;   //!
    TBranch        *b_mu_muid_trackd0beam;   //!
    TBranch        *b_mu_muid_trackd0pvunbiased;   //!
    TBranch        *b_mu_muid_tracksigd0pvunbiased;   //!
    TBranch        *b_mu_muid_truth_type;   //!
    TBranch        *b_mu_muid_truth_barcode;   //!
    TBranch        *b_mu_muid_truth_matched;   //!
    TBranch        *b_mu_muid_MI10_max40_ptsum;   //!
    TBranch        *b_MET_RefEle_tightpp_etx;   //!
    TBranch        *b_MET_RefEle_tightpp_ety;   //!
    TBranch        *b_MET_RefEle_tightpp_sumet;   //!
    TBranch        *b_MET_RefEle_mediumpp_etx;   //!
    TBranch        *b_MET_RefEle_mediumpp_ety;   //!
    TBranch        *b_MET_RefEle_mediumpp_sumet;   //!
    TBranch        *b_MET_RefJet_tightpp_etx;   //!
    TBranch        *b_MET_RefJet_tightpp_ety;   //!
    TBranch        *b_MET_RefJet_tightpp_sumet;   //!
    TBranch        *b_MET_RefJet_mediumpp_etx;   //!
    TBranch        *b_MET_RefJet_mediumpp_ety;   //!
    TBranch        *b_MET_RefJet_mediumpp_sumet;   //!
    TBranch        *b_MET_CellOut_tightpp_etx;   //!
    TBranch        *b_MET_CellOut_tightpp_ety;   //!
    TBranch        *b_MET_CellOut_tightpp_sumet;   //!
    TBranch        *b_MET_CellOut_mediumpp_etx;   //!
    TBranch        *b_MET_CellOut_mediumpp_ety;   //!
    TBranch        *b_MET_CellOut_mediumpp_sumet;   //!
    TBranch        *b_MET_Muon_Total_Muid_tightpp_etx;   //!
    TBranch        *b_MET_Muon_Total_Muid_tightpp_ety;   //!
    TBranch        *b_MET_Muon_Total_Muid_tightpp_sumet;   //!
    TBranch        *b_MET_Muon_Total_Muid_mediumpp_etx;   //!
    TBranch        *b_MET_Muon_Total_Muid_mediumpp_ety;   //!
    TBranch        *b_MET_Muon_Total_Muid_mediumpp_sumet;   //!
    TBranch        *b_MET_RefGamma_tightpp_etx;   //!
    TBranch        *b_MET_RefGamma_tightpp_ety;   //!
    TBranch        *b_MET_RefGamma_tightpp_sumet;   //!
    TBranch        *b_MET_RefGamma_mediumpp_etx;   //!
    TBranch        *b_MET_RefGamma_mediumpp_ety;   //!
    TBranch        *b_MET_RefGamma_mediumpp_sumet;   //!
    TBranch        *b_MET_RefFinal_tightpp_etx;   //!
    TBranch        *b_MET_RefFinal_tightpp_ety;   //!
    TBranch        *b_MET_RefFinal_tightpp_sumet;   //!
    TBranch        *b_MET_RefFinal_mediumpp_etx;   //!
    TBranch        *b_MET_RefFinal_mediumpp_ety;   //!
    TBranch        *b_MET_RefFinal_mediumpp_sumet;   //!
    TBranch        *b_el_MET_tightpp_wpx;   //!
    TBranch        *b_el_MET_tightpp_wpy;   //!
    TBranch        *b_el_MET_tightpp_wet;   //!
    TBranch        *b_el_MET_tightpp_statusWord;   //!
    TBranch        *b_mu_muid_MET_tightpp_wpx;   //!
    TBranch        *b_mu_muid_MET_tightpp_wpy;   //!
    TBranch        *b_mu_muid_MET_tightpp_wet;   //!
    TBranch        *b_mu_muid_MET_tightpp_statusWord;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_tightpp_wpx;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_tightpp_wpy;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_tightpp_wet;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_tightpp_statusWord;   //!
    TBranch        *b_el_MET_mediumpp_wpx;   //!
    TBranch        *b_el_MET_mediumpp_wpy;   //!
    TBranch        *b_el_MET_mediumpp_wet;   //!
    TBranch        *b_el_MET_mediumpp_statusWord;   //!
    TBranch        *b_mu_muid_MET_mediumpp_wpx;   //!
    TBranch        *b_mu_muid_MET_mediumpp_wpy;   //!
    TBranch        *b_mu_muid_MET_mediumpp_wet;   //!
    TBranch        *b_mu_muid_MET_mediumpp_statusWord;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_mediumpp_wpx;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_mediumpp_wpy;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_mediumpp_wet;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MET_mediumpp_statusWord;   //!
    TBranch        *b_MET_Truth_NonInt_etx;   //!
    TBranch        *b_MET_Truth_NonInt_ety;   //!
    TBranch        *b_MET_Truth_NonInt_sumet;   //!
    TBranch        *b_jet_AntiKt4LCTopo_n;   //!
    TBranch        *b_jet_AntiKt4LCTopo_E;   //!
    TBranch        *b_jet_AntiKt4LCTopo_pt;   //!
    TBranch        *b_jet_AntiKt4LCTopo_eta;   //!
    TBranch        *b_jet_AntiKt4LCTopo_phi;   //!
    TBranch        *b_jet_AntiKt4LCTopo_EtaOrigin;   //!
    TBranch        *b_jet_AntiKt4LCTopo_PhiOrigin;   //!
    TBranch        *b_jet_AntiKt4LCTopo_MOrigin;   //!
    TBranch        *b_jet_AntiKt4LCTopo_BCH_CORR_CELL;   //!
    TBranch        *b_jet_AntiKt4LCTopo_BCH_CORR_JET;   //!
    TBranch        *b_jet_AntiKt4LCTopo_SamplingMax;   //!
    TBranch        *b_jet_AntiKt4LCTopo_fracSamplingMax;   //!
    TBranch        *b_jet_AntiKt4LCTopo_isUgly;   //!
    TBranch        *b_jet_AntiKt4LCTopo_isBadLooseMinus;   //!
    TBranch        *b_jet_AntiKt4LCTopo_emfrac;   //!
    TBranch        *b_jet_AntiKt4LCTopo_emscale_E;   //!
    TBranch        *b_jet_AntiKt4LCTopo_emscale_pt;   //!
    TBranch        *b_jet_AntiKt4LCTopo_emscale_m;   //!
    TBranch        *b_jet_AntiKt4LCTopo_emscale_eta;   //!
    TBranch        *b_jet_AntiKt4LCTopo_emscale_phi;   //!
    TBranch        *b_jet_AntiKt4LCTopo_ActiveAreaPx;   //!
    TBranch        *b_jet_AntiKt4LCTopo_ActiveAreaPy;   //!
    TBranch        *b_jet_AntiKt4LCTopo_ActiveAreaPz;   //!
    TBranch        *b_jet_AntiKt4LCTopo_ActiveAreaE;   //!
    TBranch        *b_jet_AntiKt4LCTopo_jvtxf;   //!
    TBranch        *b_jet_AntiKt4LCTopo_constscale_E;   //!
    TBranch        *b_jet_AntiKt4LCTopo_constscale_pt;   //!
    TBranch        *b_jet_AntiKt4LCTopo_constscale_m;   //!
    TBranch        *b_jet_AntiKt4LCTopo_constscale_eta;   //!
    TBranch        *b_jet_AntiKt4LCTopo_constscale_phi;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_weight_IP3D;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_weight_JetFitterCOMBNN;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_weight_MV1;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_weight_SV0;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_weight_SV1;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_truth_label;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_component_jfitcomb_pu;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_component_jfitcomb_pb;   //!
    TBranch        *b_jet_AntiKt4LCTopo_flavor_component_jfitcomb_pc;   //!
    TBranch        *b_jet_AntiKt4LCTopo_nTrk_pv0_1GeV;   //!
    TBranch        *b_jet_AntiKt4LCTopo_trackWIDTH_pv0_1GeV;   //!
    TBranch        *b_jet_AntiKt4LCTopo_TrackAssoc_index;   //!
    TBranch        *b_AntiKt4Truth_n;   //!
    TBranch        *b_AntiKt4Truth_E;   //!
    TBranch        *b_AntiKt4Truth_pt;   //!
    TBranch        *b_AntiKt4Truth_eta;   //!
    TBranch        *b_AntiKt4Truth_phi;   //!
    TBranch        *b_top_hfor_type;   //!
    TBranch        *b_cl_lc_pt;   //!
    TBranch        *b_cl_lc_eta;   //!
    TBranch        *b_cl_lc_phi;   //!
    TBranch        *b_trk_n;   //!
    TBranch        *b_trk_pt;   //!
    TBranch        *b_trk_eta;   //!
    TBranch        *b_trk_d0_wrtPV;   //!
    TBranch        *b_trk_z0_wrtPV;   //!
    TBranch        *b_trk_phi_wrtPV;   //!
    TBranch        *b_trk_theta_wrtPV;   //!
    TBranch        *b_trk_qoverp_wrtPV;   //!
    TBranch        *b_trk_nPixHits;   //!
    TBranch        *b_trk_nSCTHits;   //!
    TBranch        *b_trkpt4_pt;   //!
    TBranch        *b_trkpt4_eta;   //!
    TBranch        *b_trkpt4_phi_wrtPV;   //!
    TBranch        *b_trkpt4_err_qoverp_wrtPV;   //!
    TBranch        *b_vxp_n;   //!
    TBranch        *b_vxp_z;   //!
    TBranch        *b_vxp_type;   //!
    TBranch        *b_vxp_nTracks;   //!
    TBranch        *b_mc_n;   //!
    TBranch        *b_mc_pt;   //!
    TBranch        *b_mc_m;   //!
    TBranch        *b_mc_eta;   //!
    TBranch        *b_mc_phi;   //!
    TBranch        *b_mc_status;   //!
    TBranch        *b_mc_barcode;   //!
    TBranch        *b_mc_pdgId;   //!
    TBranch        *b_mc_charge;   //!
    TBranch        *b_mc_child_index;   //!
    TBranch        *b_mc_parent_index;   //!
    TBranch        *b_mcVx_n;   //!
    TBranch        *b_mcVx_z;   //!
    TBranch        *b_muonTruth_barcode;   //!
    TBranch        *b_muonTruth_type;   //!
    TBranch        *b_muonTruth_origin;   //!
    TBranch        *b_mcevt_weight;   //!
    TBranch        *b_trig_EF_el_n;   //!
    TBranch        *b_trig_EF_el_eta;   //!
    TBranch        *b_trig_EF_el_phi;   //!
    TBranch        *b_trig_EF_trigmuonef_n;   //!
    TBranch        *b_trig_EF_trigmuonef_track_n;   //!
    TBranch        *b_trig_EF_trigmuonef_track_CB_pt;   //!
    TBranch        *b_trig_EF_trigmuonef_track_CB_eta;   //!
    TBranch        *b_trig_EF_trigmuonef_track_CB_phi;   //!
    TBranch        *b_GSF_trk_trk_index;   //!

    ClassDef(Reader,1);
      
  public:

    Reader(TTree *tree=0,const char* in_file_name=0);
    virtual ~Reader();
    virtual Int_t    Cut(Long64_t entry);
    virtual Int_t    GetEntry(Long64_t entry);
    virtual Long64_t LoadTree(Long64_t entry);
    virtual void     Loop();
    virtual void     Loop(const char *out_file_name);
    virtual void     Loop(const char *filename, const char* treename);
    virtual Bool_t   Notify();
    virtual void     Show(Long64_t entry = -1);
    virtual void     InitRealChain();
    virtual void     AddFiles(const std::vector<std::string>& file_names_vector);
    virtual void     AddFile(const char *file_name);

  };

}

#endif //* mAIDA_Reader_h *//
